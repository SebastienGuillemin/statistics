X1 <- split$X.quanti
X2 <- split$X.quali
res.pcamix <- PCAmix(X.quanti=X1, X.quali=X2,rename.level=TRUE,
graph=FALSE)
res.pcamix$eig
par(mfrow=c(2,2))
plot(res.pcamix,choice="ind",label=FALSE, main="Observations")
plot(res.pcamix,choice="levels",xlim=c(-1.5,2.5), main="Levels")
plot(res.pcamix,choice="cor",main="Numerical variables")
plot(res.pcamix,choice="sqload",coloring.var=T, leg=FALSE,
posleg="topright", main="All variables")
par(mfrow=c(1,1))
plot(res.pcamix,choice="ind",label=TRUE, cex=0.8, main="Observations")
splitb <- splitmix(cana.df1[,1:9])
X1b <- splitb$X.quanti
X2b <- splitb$X.quali
X.quanti.sup <-cana.df1[,1]
X.quali.sup <-cana.df1[,9,drop=FALSE]
pca<-PCAmix(X.quanti=X1b, X.quali=X2b,ndim=4,graph=FALSE)
pca2 <- supvar(pca,X.quanti.sup,X.quali.sup)
plot(pca2,choice="levels")
plot(pca2,choice="cor")
plot(pca2,choice="sqload")
plot(pca2,choice="ind",label=TRUE, cex=0.8, main="Observations")
par(mfrow=c(2,2))
plot(pca2,choice="ind",label=FALSE, main="Observations")
plot(pca2,choice="levels",xlim=c(-1.5,2.5), main="Levels")
plot(pca2,choice="cor",main="Numerical variables")
plot(pca2,choice="sqload",coloring.var=T, leg=FALSE,
posleg="topright", main="All variables")
##
# AFDM avec FactoMineR
library("FactoMineR")
library(tidyverse)
library(dplyr)
# subset the rows of dataframe with multiple conditions
df = cana[,1:10]
str(df)
df1<-df[,-9]
library(missMDA)
cana.df1$etiquette<-as.factor(cana.df1$etiquette)
cana.df1$presentation<-as.factor(cana.df1$presentation)
str(cana.df1)
ncomp <- estim_ncpFAMD(cana.df1)
res.impute <- imputeFAMD(cana.df1, ncp=ncomp$ncp)
cannabis <- read.csv("~/Documents/these/code/R/cannabis.csv", header=FALSE)
View(cannabis)
View(cannabis)
library(readr)
cannabis <- read_csv("cannabis.csv")
View(cannabis)
# Importer fichier csv.
cana<-cannabis
# Importer fichier csv.
cana<-cannabis
# Convertir colonne id en nom de lignes
cana<-data.frame(cana,row.names=1)
str(cana)
# Convertir colonne id en nom de lignes
cana<-data.frame(cana,row.names=1)
str(cana)
# Avec les données
split <- splitmix(cana.df1)
View(cana)
View(cana)
str(cana)
# Séparation données quantitatives/qualitatives
split <- splitmix(cana.df1)
# Séparation données quantitatives/qualitatives
split <- splitmix(cana.df1)
quanti <- split$X.quanti
quali <- split$X.quali
# Importer fichier csv.
cana<-cannabis
# Convertir colonne id en nom de lignes
cana<-data.frame(cana,row.names=1)
str(cana)
# Séparation données quantitatives/qualitatives
split <- splitmix(cana)
quanti <- split$X.quanti
quali <- split$X.quali
View(quali)
View(quali)
View(quanti)
View(quanti)
# Caclul ACP pour données mixtes
res.pcamix <- PCAmix(X.quanti=quanti, X.quali=quali,rename.level=TRUE, graph=FALSE)
res.pcamix$eig
library(readr)
cannabis <- read_csv("cannabis.csv")
View(cannabis)
library(PCAmixdata)
library("FactoMineR")
library(tidyverse)
library(dplyr)
library(missMDA)
library(mice)
library(VIM)
# Importer fichier csv.
cana<-cannabis
# Convertir colonne id en nom de lignes
cana<-data.frame(cana,row.names=1)
str(cana)
# Séparation données quantitatives/qualitatives
split <- splitmix(cana)
quanti <- split$X.quanti
quali <- split$X.quali
par(mfrow=c(2,2))
par(mfrow=c(2,2))
View(cana)
View(quali)
library(readr)
cannabis <- read_csv("cannabis.csv")
View(cannabis)
library(PCAmixdata)
library("FactoMineR")
library(tidyverse)
library(dplyr)
library(missMDA)
library(mice)
library(VIM)
# Importer fichier csv.
cana<-cannabis
# Convertir colonne id en nom de lignes
cana<-data.frame(cana,row.names=1)
str(cana)
# subset the rows of dataframe with multiple conditions
df = cana
str(df)
View(df)
df1<-df[,-9]
View(df1)
View(df1)
View(df)
View(df)
View(df1)
View(df1)
# Importer fichier csv.
cana<-cannabis
# Convertir colonne id en nom de lignes
cana<-data.frame(cana,row.names=1)
# Copie du dataframe cana pour garder les données de départ.
df <- cana
str(df)
library(readr)
cannabis <- read_csv("cannabis.csv")
View(cannabis)
library("FactoMineR")
library(tidyverse)
library(dplyr)
library(missMDA)
library(mice)
library(VIM)
## AFDM avec FactoMineR
# Import fichier csv.
cana<-cannabis
# Convertion colonne 'id' (première colonne) en nom de lignes
cana<-data.frame(cana,row.names=1)
# Copie du dataframe cana pour garder les données de départ.
df <- cana
View(cannabis)
View(cana)
# Copie du dataframe cana pour garder les données de départ.
df <- cana
str(df)
df$etiquette<-as.factor(df$etiquette)
df$presentation<-as.factor(df$presentation)
str(df)
summary(df)
ds_screener(df)
install.packages("ds_screener")
library(descriptr)
ds_screener(df)
# Copie du dataframe cana pour garder les données de départ.
df <- cana
ds_screener(df)
df$etiquette<-as.factor(df$etiquette)
df$presentation<-as.factor(df$presentation)
ds_screener(df)
# Imputation des données manquantes
# https://delladata.fr/imputation-donnees-manquantes-missmda/
ncomp <- estim_ncpFAMD(df)
# Transformation de certaines colonnes en factor.
df.df1$etiquette<-as.factor(cana.df1$etiquette)
df.df1$presentation<-as.factor(cana.df1$presentation)
# Transformation de certaines colonnes en factor.
df.df1$etiquette<-as.factor(cana$etiquette)
## AFDM avec FactoMineR
# Import fichier csv.
cana<-cannabis
# Convertion colonne 'id' (première colonne) en nom de lignes
cana<-data.frame(cana,row.names=1)
# Copie du dataframe cana pour garder les données de départ.
df <- cana
# Transformation de certaines colonnes en factor.
df.df1$etiquette<-as.factor(cana$etiquette)
df.df1$presentation<-as.factor(cana.df1$presentation)
cana.df1<-cana[,1:10]
View(cana.df1)
## AFDM avec FactoMineR
# Import fichier csv.
cana<-cannabis
# Convertion colonne 'id' (première colonne) en nom de lignes
cana<-data.frame(cana,row.names=1)
# Copie du dataframe cana pour garder les données de départ.
df <- cana
# Transformation de certaines colonnes en factor.
df$etiquette<-as.factor(df$etiquette)
df$presentation<-as.factor(df$presentation)
df$etiquette<-as.factor(df$etiquette)
df$presentation<-as.factor(df$presentation)
ds_screener(df)
# Imputation des données manquantes
# https://delladata.fr/imputation-donnees-manquantes-missmda/
ncomp <- estim_ncpFAMD(df)
# Imputation des données manquantes
# https://delladata.fr/imputation-donnees-manquantes-missmda/
ncomp <- estim_ncpFAMD(df, ncp=3)
# Imputation des données manquantes
# https://delladata.fr/imputation-donnees-manquantes-missmda/
ncomp <- estim_ncpFAMD(df, ncp.min=0, ncp.max=3)
# Imputation des données manquantes
# https://delladata.fr/imputation-donnees-manquantes-missmda/
ncomp <- estim_ncpFAMD(df, maxiter = 500)
library("FactoMineR")
library(PCAmixdata)
library("FactoMineR")
library(tidyverse)
library(dplyr)
library(missMDA)
library(mice)
library(VIM)
# Importer fichier csv.
cana<-cannabis
# Convertir colonne id en nom de lignes
cana<-data.frame(cana,row.names=1)
str(cana)
install.packages("tidyverse")
# Importer fichier csv.
cana<-cannabis
# Convertir colonne id en nom de lignes
cana<-data.frame(cana,row.names=1)
str(cana)
cana.df1<-cana[,1:10]
cana.df2<-cana[,1:12]
# subset the rows of dataframe with multiple conditions
df = cana[,1:10]
str(df)
cana.df2<-cana[,1:12]
# subset the rows of dataframe with multiple conditions
df = cana[,1:10]
str(df)
df1<-df[,-9]
cana.df1$etiquette<-as.factor(cana.df1$etiquette)
cana.df1$presentation<-as.factor(cana.df1$presentation)
str(cana.df1)
ncomp <- estim_ncpFAMD(cana.df1)
library(tidyverse)
library(dplyr)
library(missMDA)
library(mice)
library(VIM)
library(descriptr)
library("FactoMineR")
library(tidyverse)
library(dplyr)
library(missMDA)
library(mice)
library(VIM)
library(descriptr)
## AFDM avec FactoMineR
# Import fichier csv.
cana<-cannabis
gc()
library(readr)
cannabis <- read_csv("cannabis.csv")
View(cannabis)
## AFDM avec FactoMineR
# Import fichier csv.
cana<-cannabis
# Convertion colonne 'id' (première colonne) en nom de lignes
cana<-data.frame(cana,row.names=1)
cana.df1<-cana[,1:10]
# Copie du dataframe cana pour garder les données de départ.
df <- cana
# Transformation de certaines colonnes en factor.
df$etiquette<-as.factor(df$etiquette)
df$presentation<-as.factor(df$presentation)
df$etiquette<-as.factor(df$etiquette)
df$presentation<-as.factor(df$presentation)
ds_screener(df)
cana.df2<-cana[,1:12]
# subset the rows of dataframe with multiple conditions
df = cana[,1:10]
ds_screener(df)
# Copie du dataframe cana pour garder les données de départ.
df <- cana
# Transformation de certaines colonnes en factor.
df$etiquette<-as.factor(df$etiquette)
df$presentation<-as.factor(df$presentation)
df$etiquette<-as.factor(df$etiquette)
df$presentation<-as.factor(df$presentation)
ds_screener(df)
# Imputation des données manquantes
# https://delladata.fr/imputation-donnees-manquantes-missmda/
ncomp <- estim_ncpFAMD(df, maxiter = 500)
library(readxl)
cannabis <- read_excel("cannabis.xlsx")
View(cannabis)
library(PCAmixdata)
library("FactoMineR")
library(tidyverse)
library(dplyr)
library(missMDA)
library(mice)
library(VIM)
library(descriptr)
# Importer fichier csv.
cana<-cannabis
# Convertir colonne id en nom de lignes
cana<-data.frame(cana,row.names=1)
ds_screener(cana)
cana.df1<-cana[,1:10]
cana.df2<-cana[,1:12]
# subset the rows of dataframe with multiple conditions
df = cana[,1:10]
ds_screener(df)
df1<-df[,-9]
cana.df1$etiquette<-as.factor(cana.df1$etiquette)
cana.df1$presentation<-as.factor(cana.df1$presentation)
ds_screener(cana.df1)
ncomp <- estim_ncpFAMD(cana.df1)
library(readr)
cannabis <- read_csv("cannabis.csv")
View(cannabis)
library(readr)
cannabis <- read_csv("~/Documents/these/code/clustering/data/cannabis.csv")
View(cannabis)
## AFDM avec FactoMineR
# Import fichier csv.
cana<-cannabis
# Convertion colonne 'id' (première colonne) en nom de lignes
cana<-data.frame(cana,row.names=1)
# Copie du dataframe cana pour garder les données de départ.
df <- cana
# Transformation de certaines colonnes en factor.
df$etiquette<-as.factor(df$etiquette)
df$presentation<-as.factor(df$presentation)
df$etiquette<-as.factor(df$etiquette)
df$presentation<-as.factor(df$presentation)
ds_screener(df)
# Transformation de certaines colonnes en factor.
df$etiquette<-as.factor(df$etiquette)
#df$presentation<-as.factor(df$presentation)
ds_screener(df)
# Imputation des données manquantes
# https://delladata.fr/imputation-donnees-manquantes-missmda/
ncomp <- estim_ncpFAMD(df)
res.impute <- imputeFAMD(df, ncp=ncomp$ncp)
res.comp <- MIFAMD(df, ncp = ncomp$ncp, nboot = 100)
head(res.comp$res.MI[[1]])
plot(res.comp)
library(readr)
cannabis <- read_csv("~/Documents/these/code/clustering/data/cannabis.csv")
View(cannabis)
library("FactoMineR")
library(tidyverse)
library(dplyr)
library(missMDA)
library(mice)
library(VIM)
library(descriptr)
## AFDM avec FactoMineR
# Import fichier csv.
cana<-cannabis
# Convertion colonne 'id' (première colonne) en nom de lignes
cana<-data.frame(cana,row.names=1)
# Copie du dataframe cana pour garder les données de départ.
df <- cana
# Transformation de certaines colonnes en factor.
df$etiquette<-as.factor(df$etiquette)
#df$presentation<-as.factor(df$presentation)
ds_screener(df)
df$presentation<-as.factor(df$presentation)
ds_screener(df)
# Imputation des données manquantes
# https://delladata.fr/imputation-donnees-manquantes-missmda/
ncomp <- estim_ncpFAMD(df)
# Transformation de certaines colonnes en factor.
df$abime<-as.factor(df$abime)
df$etiquette<-as.factor(df$etiquette)
df$presentation<-as.factor(df$presentation)
df$visqueux<-as.factor(df$visqueux)
ds_screener(df)
# Imputation des données manquantes
# https://delladata.fr/imputation-donnees-manquantes-missmda/
ncomp <- estim_ncpFAMD(df)
library("FactoMineR")
library(dplyr)
library(missMDA)
library(mice)
library(VIM)
library(descriptr)
## AFDM avec FactoMineR
# Import fichier csv.
cana<-cannabis
# Convertion colonne 'id' (première colonne) en nom de lignes
cana<-data.frame(cana,row.names=1)
# Copie du dataframe cana pour garder les données de départ.
df <- cana
# Transformation de certaines colonnes en factor.
df$abime<-as.factor(df$abime)
df$etiquette<-as.factor(df$etiquette)
df$presentation<-as.factor(df$presentation)
df$visqueux<-as.factor(df$visqueux)
ds_screener(df)
# Imputation des données manquantes
# https://delladata.fr/imputation-donnees-manquantes-missmda/
ncomp <- estim_ncpFAMD(df)
# Imputation des données manquantes
# https://delladata.fr/imputation-donnees-manquantes-missmda/
ncomp <- estim_ncpFAMD(df, maxiter = 500)
# Copie du dataframe cana pour garder les données de départ.
df <- cana
# Transformation de certaines colonnes en factor.
df$abime<-as.factor(df$abime)
df$etiquette<-as.factor(df$etiquette)
df$presentation<-as.factor(df$presentation)
df$visqueux<-as.factor(df$visqueux)
ds_screener(df)
# Imputation des données manquantes
# https://delladata.fr/imputation-donnees-manquantes-missmda/
ncomp <- estim_ncpFAMD(df, ncp.max=2)
res.impute <- imputeFAMD(df, ncp=ncomp$ncp)
res.comp <- MIFAMD(df, ncp = ncomp$ncp, nboot = 100)
head(res.comp$res.MI[[1]])
plot(res.comp)
ds_screener(res.comp)
res.comp$res.MI[[1]]
res.comp$res.MI[[1]]
res.comp
## The output can be used as an input of the FAMD function of the FactoMineR package
##to perform the FAMD on the incomplete data ozone
res.famd <- FAMD(cana.df1,
tab.disj=res.impute$tab.disj,graph=FALSE)
## The output can be used as an input of the FAMD function of the FactoMineR package
##to perform the FAMD on the incomplete data ozone
res.famd <- FAMD(df, tab.disj=res.impute$tab.disj,graph=FALSE)
#res.famd <- FAMD(cana.df1[,c(1:9)],sup.var=c(1))
print(res.famd)
## The output can be used as an input of the FAMD function of the FactoMineR package
##to perform the FAMD on the incomplete data ozone
res.famd <- FAMD(df, tab.disj=res.impute$tab.disj,graph=TRUE)
#res.famd <- FAMD(cana.df1[,c(1:9)],sup.var=c(1))
print(res.famd)
eig.val <- get_eigenvalue(res.famd)
library("factoextra")
eig.val <- get_eigenvalue(res.famd)
head(eig.val)
fviz_screeplot(res.famd)
var <- get_famd_var(res.famd)
# Graphique des variables
fviz_famd_var(res.famd, repel = TRUE)
quanti.var <- get_famd_var(res.famd, "quanti.var")
fviz_famd_var(res.famd, "quanti.var", col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
# Couleur par valeurs cos2: qualité sur le plan des facteurs
fviz_famd_var(res.famd, "quanti.var", col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_famd_var(res.famd, "quanti.var", col.var = "cos2", axes=c(2,3),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
quali.var <- get_famd_var(res.famd, "quali.var")
fviz_famd_var(res.famd, "quali.var", col.var = "contrib",
gradient.cols = "jco")
fviz_famd_var(res.famd, "quali.var", col.var = "cos2",
gradient.cols = "jco",col.var.sup = "black")
fviz_famd_var(res.famd, "quali.var", col.var = "cos2", axes = c(1, 3),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
fviz_famd_var(res.famd, "quali.var", col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),sup.var="black")
ind <- get_famd_ind(res.famd)
fviz_famd_ind(res.famd, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
labels = FALSE)
fviz_mfa_ind(res.famd,
habillage = "presentation", # color by groups
palette = "jco",
addEllipses = TRUE, ellipse.type = "confidence",
labels = FALSE
)
fviz_mfa_ind(res.famd,
habillage = "presentation", # color by groups
palette = "jco",
addEllipses = TRUE, ellipse.type = "confidence",
repel = TRUE # Avoid text overlapping
)
par(mfrow=c(1,1))
md.pattern(cana.df1)
res.impute$tab.disj
# Récupération des valeurs propres
eig.val <- get_eigenvalue(res.famd)
head(eig.val)
fviz_screeplot(res.famd)
var <- get_famd_var(res.famd)
var
# Graphique des variables
fviz_famd_var(res.famd, repel = TRUE)
# Graphique des variables
fviz_famd_ind(res.famd, repel = TRUE)
